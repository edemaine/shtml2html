#!/usr/bin/env node

fs := require 'fs'
path := require 'path'
strftime := require 'strftime'

class Convert
  // Maintains state of converter, including configuration and variables.
  // Make a new instance for each top-level file conversion
  // (or use `convertFile`).
  config: Record<string, string>
  vars: Record<string, string | (() => string)>
  rootFilename: string

  @(@rootFilename: string, outFilename: string)
    @config =
      echomsg: '(none)'
      errormsg: '[an error occurred while processing this directive]'
      sizefmt: 'bytes'
      timefmt: "%A, %d-%b-%Y %H:%M:%S %Z"
    @vars =
      DOCUMENT_NAME: outFilename
      LAST_MODIFIED: => @flastmod @rootFilename

  flastmod(filename: string)
    try
      strftime @config.timefmt, fs.statSync(filename).mtime
    catch error
      console.log `!! flastmod error: ${error}`
      @config.errormsg

  convertToString(filename: string = @rootFilename)
    html .= fs.readFileSync filename, encoding: 'utf8'
    loop
      old := html
      html = html
      .replace /<!--#(include|flastmod)\s+(file|virtual)\s*=\s*"([^"]+)"\s*-->/g,
        (match: string, command: string, type: string, url: string) =>
          if type == 'file' and (url.includes('../') or path.isAbsolute(url))
            console.log `!! Invalid #include file: ${url}`
            @config.errormsg
          else
            target := path.join path.dirname(filename), url
            switch command
              when 'include'
                @convertToString target
              when 'flastmod'
                @flastmod target
      .replace /<!--#config\s+(\w+)="([^"]+)"\s*-->/g,
        (match: string, key: string, value: string) =>
          @config[key] = value
          ''
      .replace /<!--#echo\s+var="([^"]+)"\s*-->/g,
        (match: string, key: string) =>
          val .= @vars[key] ?? @config.echomsg
          val = val() if val instanceof Function
          val
      break if old == html
    html

function convertFile(filename: string, outFilename?: string)
  // Top-level file conversion
  outFilename ?= filename.replace(/\.shtml$/, '') + '.html'
  console.log filename, '->', outFilename
  convert := new Convert filename, outFilename
  fs.writeFileSync outFilename, """
    <!--This file is automatically generated by shtml2html. DO NOT EDIT.-->
    #{convert.convertToString()}
  """, encoding: 'utf8'

function main()
  for arg of process.argv[2..]
    convertFile arg

main() if require.main == module
